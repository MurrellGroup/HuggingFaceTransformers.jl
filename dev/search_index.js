var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = HuggingFaceTransformers","category":"page"},{"location":"#HuggingFaceTransformers","page":"Home","title":"HuggingFaceTransformers","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for HuggingFaceTransformers.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [HuggingFaceTransformers]","category":"page"},{"location":"#HuggingFaceTransformers.HuggingFaceTransformers","page":"Home","title":"HuggingFaceTransformers.HuggingFaceTransformers","text":"HuggingFaceTokenizers\n\nA Julia wrapper around HuggingFace's Tokenizers Python library.\n\nSee https://huggingface.co/docs/tokenizers/en/index for official documentation.\n\n\n\n\n\n","category":"module"},{"location":"#HuggingFaceTransformers.Model","page":"Home","title":"HuggingFaceTransformers.Model","text":"Tokenizer\n\nA wrapper around a Python tokenizer.\n\n\n\n\n\n","category":"type"},{"location":"#HuggingFaceTransformers.apply_chat_template-Tuple{AutoTokenizer, Vector{Dict{String, String}}}","page":"Home","title":"HuggingFaceTransformers.apply_chat_template","text":"apply_chat_template(tokenizer::AutoTokenizer, messages::Vector{Dict{String, String}}, tokenize=true, add_generation_prompt=false, kwargs...)\n\nApplies a chat template (if one is associated with this model's tokenizer). Keyword arguments include tokenize (bool) and add_generation_prompt (bool).\n\nprompt = \"Write me a poem.\"\nmessages = [\n    Dict(\"role\" => \"system\", \"content\" => \"You are Bob, a helpful assistant.\"),\n    Dict(\"role\" => \"user\", \"content\" => prompt)]\n\ntext = apply_chat_template(tokenizer, messages, tokenize=false, add_generation_prompt=true)\n\n\n\n\n\n","category":"method"},{"location":"#HuggingFaceTransformers.decode-Tuple{AutoTokenizer, Vararg{Any}}","page":"Home","title":"HuggingFaceTransformers.decode","text":"decode(tokenizer::Tokenizer, ids::Vector{Int}, skip_special_tokens = false) -> String\n\nDecode a sequence of token IDs back into text.\n\n\n\n\n\n","category":"method"},{"location":"#HuggingFaceTransformers.encode-Tuple{AutoTokenizer, String}","page":"Home","title":"HuggingFaceTransformers.encode","text":"encode(tokenizer::Tokenizer, text::String, kwargs...) -> Vector{Int}\n\nEncode a single text string into tokens and their corresponding IDs.\n\n\n\n\n\n","category":"method"},{"location":"#HuggingFaceTransformers.from_pretrained-Tuple{Type{AutoTokenizer}, String}","page":"Home","title":"HuggingFaceTransformers.from_pretrained","text":"from_pretrained(model_path::String) -> Tokenizer\n\nLoad a pretrained AutoTokenizer. m can be a model name or a path to a local model, or a HuggingFace URL. Compared to HuggingFaceTokenizers.jl, this can use eg. chat templates.\n\n\n\n\n\n","category":"method"},{"location":"#HuggingFaceTransformers.from_pretrained-Tuple{Type{CausalLM}, String}","page":"Home","title":"HuggingFaceTransformers.from_pretrained","text":"from_pretrained(CausalLM, model_path::String) -> Model\n\nLoad a pretrained model. m can be a model name or a path to a local model, or a HuggingFace URL.\n\n\n\n\n\n","category":"method"},{"location":"#HuggingFaceTransformers.from_pretrained-Tuple{Type{Model}, String}","page":"Home","title":"HuggingFaceTransformers.from_pretrained","text":"from_pretrained(Transformer, model_path::String) -> Model\n\nLoad a pretrained model. m can be a model name or a path to a local model, or a HuggingFace URL.\n\n\n\n\n\n","category":"method"},{"location":"#HuggingFaceTransformers.generate-Tuple{CausalLM, Vector{Int64}}","page":"Home","title":"HuggingFaceTransformers.generate","text":"generate(model::CausalLM, prefix_tokens::Vector{Int64}; kw...) -> Vector{Array}\ngenerate(model::CausalLM, prompt::String, tokenizer; kw...) -> String\n\nGenerate text from a model. \n\n\n\n\n\n","category":"method"},{"location":"#HuggingFaceTransformers.tensor-Tuple{PythonCall.Core.Py}","page":"Home","title":"HuggingFaceTransformers.tensor","text":"tensor(x::Py) -> Array\n\nConvert a PyTorch tensor to a Julia array, detaching the tensor.\n\n\n\n\n\n","category":"method"}]
}
